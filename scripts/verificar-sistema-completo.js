const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verificarSistemaInscricoes() {
  console.log('üîç Verificando sistema de inscri√ß√µes...\n');
  
  try {
    // 1. Verificar se a tabela existe e est√° acess√≠vel
    console.log('1. Testando acesso √† tabela...');
    const { data: testSelect, error: selectError } = await supabase
      .from('inscricoes_regata')
      .select('count')
      .limit(1);
      
    if (selectError) {
      console.error('‚ùå Erro ao acessar tabela:', selectError);
      return;
    }
    console.log('‚úÖ Tabela acess√≠vel');

    // 2. Testar inser√ß√£o
    console.log('2. Testando inser√ß√£o de dados...');
    const { data: insertData, error: insertError } = await supabase
      .from('inscricoes_regata')
      .insert([
        {
          nome_capitao: 'Jo√£o Teste',
          email: 'joao.teste@example.com',
          telefone: '(11) 99999-9999',
          classe_barco: 'cruceiro',
          nome_barco: 'Vento Forte',
          tamanho_barco: '35 p√©s',
          num_tripulantes: 5,
          experiencia: 'intermediario',
          ja_participou: true,
          edicoes_anteriores: '2022, 2023',
          expectativas: 'Competir e me divertir!',
          como_conheceu: 'Site oficial',
          aceita_contato: true
        }
      ])
      .select();
      
    if (insertError) {
      console.error('‚ùå Erro ao inserir:', insertError);
      return;
    }
    console.log('‚úÖ Inser√ß√£o funcionando');
    
    // 3. Testar leitura
    console.log('3. Testando leitura de dados...');
    const { data: readData, error: readError } = await supabase
      .from('inscricoes_regata')
      .select('*')
      .eq('email', 'joao.teste@example.com');
      
    if (readError) {
      console.error('‚ùå Erro ao ler:', readError);
      return;
    }
    console.log('‚úÖ Leitura funcionando');
    console.log('üìã Dados inseridos:', readData[0]);

    // 4. Testar atualiza√ß√£o
    console.log('4. Testando atualiza√ß√£o...');
    const { data: updateData, error: updateError } = await supabase
      .from('inscricoes_regata')
      .update({ status: 'aprovada', observacoes: 'Teste de atualiza√ß√£o' })
      .eq('email', 'joao.teste@example.com')
      .select();
      
    if (updateError) {
      console.error('‚ùå Erro ao atualizar:', updateError);
      return;
    }
    console.log('‚úÖ Atualiza√ß√£o funcionando');

    // 5. Limpar dados teste
    console.log('5. Limpando dados teste...');
    const { error: deleteError } = await supabase
      .from('inscricoes_regata')
      .delete()
      .eq('email', 'joao.teste@example.com');
      
    if (deleteError) {
      console.error('‚ùå Erro ao deletar:', deleteError);
      return;
    }
    console.log('‚úÖ Exclus√£o funcionando');

    // 6. Verificar contagem total
    console.log('6. Verificando total de inscri√ß√µes...');
    const { count, error: countError } = await supabase
      .from('inscricoes_regata')
      .select('*', { count: 'exact', head: true });
      
    if (countError) {
      console.error('‚ùå Erro ao contar:', countError);
      return;
    }
    console.log(`‚úÖ Total de inscri√ß√µes no banco: ${count}`);

    console.log('\nüéâ SISTEMA DE INSCRI√á√ïES TOTALMENTE FUNCIONAL!');
    console.log('\nüìã Recursos dispon√≠veis:');
    console.log('   ‚Ä¢ Popup de inscri√ß√£o no site principal');
    console.log('   ‚Ä¢ Painel admin em /admin/inscricoes');
    console.log('   ‚Ä¢ Envio autom√°tico de emails');
    console.log('   ‚Ä¢ Pol√≠ticas de seguran√ßa (RLS)');
    console.log('   ‚Ä¢ CRUD completo via interface admin');
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
}

verificarSistemaInscricoes();